# Copyright (c) 2012, Johnny C. Lam
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

###
# pecan_vars
#
# Set variables that may be modified for use by scripts including this library.
#
pecan_vars()
{
	for _pb_vars_action in ${pecan_action_registry}; do
		_pb_vars_setvar="pecan_${_pb_vars_action}_vars"
		if pecan_is_function_defined "${_pb_vars_setvar}"; then
			${_pb_vars_setvar}
		fi
	done
}

###
# pecan_deferred_vars
#
# Set deferred variables for use by scripts including this library.
#
pecan_deferred_vars()
{
	for _pb_vars_action in ${pecan_action_registry}; do
		_pb_vars_set_deferred_var="pecan_${_pb_vars_action}_deferred_vars"
		if pecan_is_function_defined "${_pb_vars_set_deferred_var}"; then
			${_pb_vars_set_deferred_var}
		fi
	done
}

###
# pecan_main action [...]
#
pecan_main()
{
	pecan_main_args="$@"
	_pb_main_stack="${pecan_main_args}"

	pecan_deferred_vars
	while [ -n "${_pb_main_stack}" ]; do
		_pb_main_top="${_pb_main_stack%%[ ]*}"
		case "${_pb_main_stack}" in
		*" "*)	_pb_main_stack="${_pb_main_stack#* }" ;;
		*)	_pb_main_stack= ;;
		esac

		case "${_pb_main_top}" in
		pecan_do_*)
			"${_pb_main_top}" || exit 1
			;;
		*)
			case "${pecan_action_registry}" in
			${_pb_main_top}|"${_pb_main_top} "*|*" ${_pb_main_top} "*|*" ${_pb_main_top}")
				eval _pb_main_require=\"\${pecan_${_pb_main_top}_require}\"
				eval _pb_main_do="pecan_do_${_pb_main_top}"
				if [ -n "${_pb_main_do}" ]; then
					if [ -z "${_pb_main_stack}" ]; then
						_pb_main_stack="${_pb_main_do}"
					else
						_pb_main_stack="${_pb_main_do} ${_pb_main_stack}"
					fi
				fi
				if [ -n "${_pb_main_require}" ]; then
					if [ -z "${_pb_main_stack}" ]; then
						_pb_main_stack="${_pb_main_require}"
					else
						_pb_main_stack="${_pb_main_require} ${_pb_main_stack}"
					fi
				fi
				;;
			*)
				pecan_errmsg "unknown action \`${_pb_main_top}'."
				exit 1
				;;
			esac
			;;
		esac
	done
}
