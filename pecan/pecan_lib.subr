# Copyright (c) 2012, 2016, Johnny C. Lam
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

###
# pecan_msg string
#
# Print the string to standard output with the pkgname as the preamble.
#
pecan_msg()
{
	echo "$0 [${pecan_pkgname}]:" $*
}

###
# pecan_errmsg string
#
# Print the string to standard error with the pkgname as the preamble.
#
pecan_errmsg()
{
	echo 1>&2 "$0 [${pecan_pkgname}]:" $*
}


###
# pecan_is_function_defined symbol
#
# Returns 0 if there is a shell function with the given symbol name;
# otherwise, returns 1.
#
pecan_is_function_defined()
{
	type "$1" | while read _pb_test_fn_line; do
		case "${_pb_test_fn_line}" in
		*" function")	return 0 ;;
		esac
		return 1
	done
}

###
# pecan_action_generator action
#
# Uses the action name and invokes the following in order:
#
#	pecan_pre_<action>
#	pecan_<action>
#	pecan_post_<action>
#
# Generates a cookie file upon completion if pecan_<action>_cookie
# is set to the cookie pathname.
#
pecan_action_generator()
{
	_pb_gen_name="$1"

	eval _pb_gen_action_default=\"\${pecan_${_pb_gen_name}_default}\"
	[ -n "${_pb_gen_action_default}" ] || \
		_pb_gen_action_default="pecan_${_pb_gen_name}_default"

	eval _pb_gen_action=\"\${pecan_${_pb_gen_name}}\"
	eval _pb_gen_preaction=\"\${pecan_pre_${_pb_gen_name}}\"
	eval _pb_gen_postaction=\"\${pecan_post_${_pb_gen_name}}\"
	eval _pb_gen_extra_actions=\"\${pecan_${_pb_gen_name}_extra_actions}\"

	if [ -n "${_pb_gen_action}" ]; then
		if [ "${_pb_gen_action}" != ":" ] && \
		   ! pecan_is_function_defined "${_pb_gen_action}"; then
			pecan_errmsg "\`${_pb_gen_action}' function not found."
			return 1
		fi
	elif pecan_is_function_defined "pecan_${_pb_gen_name}"; then
		_pb_gen_action="pecan_${_pb_gen_name}"
	elif pecan_is_function_defined "${_pb_gen_action_default}"; then
		_pb_gen_action="${_pb_gen_action_default}"
	else
		_pb_gen_action=:
	fi

	if [ -n "${_pb_gen_preaction}" ]; then
		if [ "${_pb_gen_preaction}" != ":" ] && \
		   ! pecan_is_function_defined "${_pb_gen_preaction}"; then
			pecan_errmsg "\`${_pb_gen_preaction}' function not found."
			return 1
		fi
	elif pecan_is_function_defined "pecan_pre_${_pb_gen_name}"; then
		_pb_gen_preaction="pecan_pre_${_pb_gen_name}"
	else
		_pb_gen_preaction=:
	fi

	if [ -n "${_pb_gen_postaction}" ]; then
		if [ "${_pb_gen_postaction}" != ":" ] && \
		   ! pecan_is_function_defined "${_pb_gen_postaction}"; then
			pecan_errmsg "\`${_pb_gen_postaction}' function not found."
			return 1
		fi
	elif pecan_is_function_defined "pecan_post_${_pb_gen_name}"; then
		_pb_gen_postaction="pecan_post_${_pb_gen_name}"
	else
		_pb_gen_postaction=:
	fi

	if [ -n "${_pb_gen_extra_actions}" ]; then
		for _pb_gen_extra_action in ${_pb_gen_extra_actions}; do
			if ! pecan_is_function_defined "${_pb_gen_extra_action}"; then
				pecan_errmsg "\`${_pb_gen_extra_action}' function not found."
				return 1
			fi
		done
	else
		_pb_gen_extra_actions=:
	fi

	eval _pb_gen_action_cookie=\"\${pecan_${_pb_gen_name}_cookie}\"
	_pb_gen_action_msg="pecan_msg \"doing action \\\`\\\`\${_pb_gen_name}''\""
	if [ -z "${_pb_gen_action_cookie}" ]; then
		( eval "${_pb_gen_action_msg}" &&
		  ${_pb_gen_preaction} &&
		  ${_pb_gen_action} &&
		  ${_pb_gen_postaction} &&
		  ${_pb_gen_extra_actions} )
	elif [ ! -f "${_pb_gen_action_cookie}" ]; then
		( eval "${_pb_gen_action_msg}" &&
		  ${_pb_gen_preaction} &&
		  ${_pb_gen_action} &&
		  ${_pb_gen_postaction} &&
		  ${_pb_gen_extra_actions} ) &&
		echo > "${_pb_gen_action_cookie}"
	fi
}

###
# pecan_platform_name [-a|-s|-v] varname
#
# Saves the Encap platform name into the named variable.
#	-a  save the architecture name
#	-s  save the operating system name
#	-v  save the operating system version
#
pecan_platform_name()
{
	case "$1" in
	-a)	_pb_platform_save=architecture; shift ;;
	-s)	_pb_platform_save=operatingsystem; shift ;;
	-v)	_pb_platform_save=osversion; shift ;;
	*)	_pb_platform_save=name ;;
	esac

	_pb_platform_varname="$1"

	_pb_platform_architecture=`uname -m | tr '[A-Z]' '[a-z]'`
	_pb_platform_operatingsystem=`uname -s | tr '[A-Z]' '[a-z]'`
	_pb_platform_osversion=`uname -r | tr '[A-Z]' '[a-z]'`
	_pb_platform_name="${_pb_platform_architecture}-${_pb_platform_operatingsystem}-${_pb_platform_osversion}"

	[ -z "${_pb_platform_varname}" ] || \
		eval "${_pb_platform_varname}=\"\${_pb_platform_${_pb_platform_save}}\""
}

###
# pecan_pkgspec_parse pkgspec pkgname_varname version_varname
#	[swver_varname [pkgver_varname]]
#
# Splits pkgspec into <pkgname>-<swver>[+<pkgver>] and saves each piece of
# the pkgspec into the corresponding variable.
#
pecan_pkgspec_parse()
{
	_pb_parse_pkgspec="$1"
	_pb_parse_pkgname_varname="$2"
	_pb_parse_version_varname="$3"
	_pb_parse_swver_varname="$4"
	_pb_parse_pkgver_varname="$5"

	case "${_pb_parse_pkgspec}" in
	*+*)
		_pb_parse_pkgver="${_pb_parse_pkgspec##*+}"
		_pb_parse_pkgname="${_pb_parse_pkgspec%+${_pb_parse_pkgver}}"
		case "${_pb_parse_pkgver}" in
		*[!0-9]*)
			_pb_parse_pkgver=
			_pb_parse_pkgname="${_pb_parse_pkgspec}"
			;;
		esac
		;;
	*)
		_pb_parse_pkgver=
		_pb_parse_pkgname="${_pb_parse_pkgspec}"
	esac

	_pb_parse_swver="${_pb_parse_pkgname##*-}"
	_pb_parse_pkgname="${_pb_parse_pkgname%-${_pb_parse_swver}}"
	case "${_pb_parse_swver}" in
	.*|*[/+]*)
		pecan_errmsg "pkgspec \`${_pb_parse_pkgspec}' has bad <swver> \`${_pb_parse_swver}'."
		return 1
		;;
	esac

	if [ -n "${_pb_parse_pkgver}" ]; then
		_pb_parse_version="${_pb_parse_swver}+${_pb_parse_pkgver}"
	else
		_pb_parse_version="${_pb_parse_swver}"
	fi

	case "${_pb_parse_pkgname}" in
	*/*)
		pecan_errmsg "pkgspec \`${_pb_parse_pkgspec}' has bad <pkgname> \`${_pb_parse_pkgname}'."
		return 1
		;;
	esac

	# Check for pkgspec with no version.
	if [ "${_pb_parse_pkgname}" = "${_pb_parse_version}" ]; then
		case "${_pb_parse_pkgspec}" in
		*-*)	;;
		*)
			# pkgspec has no version.
			_pb_parse_version=
			_pb_parse_swver=
			_pb_parse_pkgver=
			;;
		esac
	fi

	[ -z "${_pb_parse_pkgname_varname}" ] || \
		eval ${_pb_parse_pkgname_varname}=\"${_pb_parse_pkgname}\"
	[ -z "${_pb_parse_version_varname}" ] || \
		eval ${_pb_parse_version_varname}=\"${_pb_parse_version}\"
	[ -z "${_pb_parse_swver_varname}" ] || \
		eval ${_pb_parse_swver_varname}=\"${_pb_parse_swver}\"
	[ -z "${_pb_parse_pkgver_varname}" ] || \
		eval ${_pb_parse_pkgver_varname}=\"${_pb_parse_pkgver}\"
}

###
# pecan_vercmp version1 version2
#
# Compares version1 and version2 and returns:
#
#	0 if version1 and version2 are the same,
#	1 if version1 > version2
#	2 if version1 < version2
#
# The algorithm is to compare each substring separated by `.' and to
# compare the next substring if the current ones match.  If the
# substrings are numeric, then do a numeric comparison; otherwise, do
# a string comparison.  Treat the common substrings for pre-release as
# follows:
#
#	alpha < beta < rc
#
# An empty version is a null version and is considered the lowest
# version.
#
pecan_vercmp()
{
	_pb_vercmp_version1="$1"
	_pb_vercmp_version2="$2"

	# Same versions.
	if [ "${_pb_vercmp_version1}" = "${_pb_vercmp_version2}" ]; then
		return 0
	fi

	# Null versions.
	[ -n "${_pb_vercmp_version1}" ] || return 2
	[ -n "${_pb_vercmp_version2}" ] || return 1

	# Break down versions for comparisons.
	_pb_vercmp_dot_rest1="${_pb_vercmp_version1}"
	_pb_vercmp_dot_rest2="${_pb_vercmp_version2}"
	while true; do
		_pb_vercmp_dot_head1="${_pb_vercmp_dot_rest1%%.*}"
		case "${_pb_vercmp_dot_rest1}" in
		*.*)	_pb_vercmp_dot_rest1="${_pb_vercmp_dot_rest1#*.}" ;;
		*)	_pb_vercmp_dot_rest1= ;;
		esac
		_pb_vercmp_dot_head2="${_pb_vercmp_dot_rest2%%.*}"
		case "${_pb_vercmp_dot_rest2}" in
		*.*)	_pb_vercmp_dot_rest2="${_pb_vercmp_dot_rest2#*.}" ;;
		*)	_pb_vercmp_dot_rest2= ;;
		esac

		_pb_vercmp_str_rest1="${_pb_vercmp_dot_head1}"
		_pb_vercmp_str_rest2="${_pb_vercmp_dot_head2}"
		while true; do
			_pb_vercmp_str_head1="${_pb_vercmp_str_rest1%%[!0-9]*}"
			case "${_pb_vercmp_str_rest1}" in
			*[!0-9]*)	_pb_vercmp_str_rest1="${_pb_vercmp_str_rest1#${_pb_vercmp_str_head1}}" ;;
			*)		_pb_vercmp_str_rest1= ;;
			esac
			_pb_vercmp_str_head2="${_pb_vercmp_str_rest2%%[!0-9]*}"
			case "${_pb_vercmp_str_rest2}" in
			*[!0-9]*)	_pb_vercmp_str_rest2="${_pb_vercmp_str_rest2#${_pb_vercmp_str_head2}}" ;;
			*)		_pb_vercmp_str_rest2= ;;
			esac

			if [ -z "${_pb_vercmp_str_head1}" -o -z "${_pb_vercmp_str_head2}" ]; then
				if [ "${_pb_vercmp_dot_head1}" ">" "${_pb_vercmp_dot_head2}" ]; then
					return 1
				elif [ "${_pb_vercmp_dot_head1}" "<" "${_pb_vercmp_dot_head2}" ]; then
					return 2
				fi
			elif [ ${_pb_vercmp_str_head1} -gt ${_pb_vercmp_str_head2} ]; then
				return 1
			elif [ ${_pb_vercmp_str_head1} -lt ${_pb_vercmp_str_head2} ]; then
				return 2
			else
				_pb_vercmp_str_head1="${_pb_vercmp_str_rest1%%[0-9]*}"
				case "${_pb_vercmp_str_rest1}" in
				*[0-9]*)	_pb_vercmp_str_rest1="${_pb_vercmp_str_rest1#${_pb_vercmp_str_head1}}" ;;
				*)		_pb_vercmp_str_rest1= ;;
				esac
				_pb_vercmp_str_head2="${_pb_vercmp_str_rest2%%[0-9]*}"
				case "${_pb_vercmp_str_rest2}" in
				*[0-9]*)	_pb_vercmp_str_rest2="${_pb_vercmp_str_rest2#${_pb_vercmp_str_head2}}" ;;
				*)		_pb_vercmp_str_rest2= ;;
				esac

				case "${_pb_vercmp_str_head1}" in
				alpha)	_pb_vercmp_str_value1=1 ;;
				beta)	_pb_vercmp_str_value1=2 ;;
				rc)	_pb_vercmp_str_value1=99 ;;
				"")	_pb_vercmp_str_value1=100 ;;
				+)	_pb_vercmp_str_value1=101 ;;
				*)	_pb_vercmp_str_value1=1000 ;;
				esac
				case "${_pb_vercmp_str_head2}" in
				alpha)	_pb_vercmp_str_value2=1 ;;
				beta)	_pb_vercmp_str_value2=2 ;;
				rc)	_pb_vercmp_str_value2=99 ;;
				"")	_pb_vercmp_str_value2=100 ;;
				+)	_pb_vercmp_str_value2=101 ;;
				*)	_pb_vercmp_str_value2=1000 ;;
				esac

				if [ ${_pb_vercmp_str_value1} -eq 1000 -a ${_pb_vercmp_str_value2} -eq 1000 ]; then
					if [ "${_pb_vercmp_str_head1}" ">" "${_pb_vercmp_str_head2}" ]; then
						return 1
					elif [ "${_pb_vercmp_str_head1}" "<" "${_pb_vercmp_str_head2}" ]; then
						return 2
					fi
				elif [ ${_pb_vercmp_str_value1} -eq 100 -a ${_pb_vercmp_str_value2} -eq 100 ]; then
					break
				elif [ ${_pb_vercmp_str_value1} -gt ${_pb_vercmp_str_value2} ]; then
					return 1
				elif [ ${_pb_vercmp_str_value1} -lt ${_pb_vercmp_str_value2} ]; then
					return 2
				fi
			fi
		done
	done
	return 0
}

###
# pecan_pkgspec_check operator pkgspec pkgspec_to_check
#
# Check if "pkgspec_to_check" is a match for the given prereq
# "operator pkgspec".
#
# Returns 0 if a match is found; non-zero otherwise.
#
pecan_pkgspec_check()
{
	_pb_check_cmp="$1"
	_pb_check_pkgspec="$2"
	_pb_check_pkgspec_to_check="$3"

	# Sanity-check comparison operator.
	case "${_pb_check_cmp}" in
	[*]|"<="|"<"|">="|">"|=)
		;;
	*)
		${pecan_errmsg} "unknown pkgspec comparison operator \`${_pb_check_cmp}'."
		return 1
		;;
	esac

	# Split the two pkgspecs into their components.
	pecan_pkgspec_parse "${_pb_check_pkgspec}" \
		_pb_check_pkgname _pb_check_version || return 1
	pecan_pkgspec_parse "${_pb_check_pkgspec_to_check}" \
		_pb_check_pkgname_to_check _pb_check_version_to_check || return 1

	[ "${_pb_check_pkgname}" = "${_pb_check_pkgname_to_check}" ] || return 1

	pecan_vercmp "${_pb_check_version_to_check}" "${_pb_check_version}"
	_pb_check_cmp_result=$?
	case "${_pb_check_cmp}" in
	[*])	# any
		case "${_pb_check_cmp_result}" in
		0|1|2)	return 0 ;;
		esac
		;;
	"<=")	# less than or equal to
		case "${_pb_check_cmp_result}" in
		0|2)	return 0 ;;
		esac
		;;
	"<")	# less than
		case "${_pb_check_cmp_result}" in
		2)	return 0 ;;
		esac
		;;
	"=")	# equal to
		case "${_pb_check_cmp_result}" in
		0)	return 0 ;;
		esac
		;;
	">")	# greater than
		case "${_pb_check_cmp_result}" in
		1)	return 0 ;;
		esac
		;;
	">=")	# greater than or equal to
		case "${_pb_check_cmp_result}" in
		0|1)	return 0 ;;
		esac
		;;
	esac
	return 1
}


###
# pecan_pkgspec_match operator pkgspec best_match_varname
#
# Searches for the packages in ${PECAN_SOURCE} that match the prereq
# "operator pkgspec" and saves the pkgspec of the best match into the
# given variable.
#
# Returns 0 if a match is found; non-zero otherwise.
#
pecan_pkgspec_match()
{
	_pb_match_cmp="$1"
	_pb_match_pkgspec="$2"
	_pb_match_varname="$3"

	case "${_pb_match_cmp}" in
	[*]|"<="|"<"|">="|">"|=)
		;;
	*)
		${pecan_errmsg} "unknown pkgspec comparison operator \`${_pb_match_cmp}'."
		return 1
		;;
	esac

	pecan_pkgspec_parse "${_pb_match_pkgspec}" \
		_pb_match_pkgname _pb_match_version || return 1

	_pb_match_best_version=
	for _pb_match_root in "${PECAN_SOURCE}/${_pb_match_pkgname}-"*; do
		case "${_pb_match_root}" in
		"${PECAN_SOURCE}/${_pb_match_pkgname}-*")
			break
			;;
		*)
			_pb_match_root="${_pb_match_root#${PECAN_SOURCE}/}"
			;;
		esac
		pecan_pkgspec_parse "${_pb_match_root}" \
			_pb_match_root_pkgname _pb_match_root_version || continue
		[ "${_pb_match_pkgname}" = "${_pb_match_root_pkgname}" ] || continue

		pecan_vercmp "${_pb_match_root_version}" "${_pb_match_best_version}"
		_pb_match_best_cmp_result="$?"
		if pecan_pkgspec_check "${_pb_match_cmp}" "${_pb_match_pkgspec}" "${_pb_match_root}" && \
			[ ${_pb_match_best_cmp_result} -eq 1 ]; then
			_pb_match_best_version="${_pb_match_root_version}"
		fi
	done

	if [ -z "${_pb_match_best_version}" ]; then
		_pb_match_best=
		[ -z "${_pb_match_varname}" ] || \
			eval ${_pb_match_varname}=\"${_pb_match_best}\"
		return 1
	else
		_pb_match_best="${_pb_match_pkgname}-${_pb_match_best_version}"
		[ -z "${_pb_match_varname}" ] || \
			eval ${_pb_match_varname}=\"${_pb_match_best}\"
		return 0
	fi
}

###
# pecan_dirlist dir
#
# Walk the directory tree headed by dir and list the contents.
#
pecan_dirlist()
{
	local file
	local path

	if [ -z "$2" ] ; then
		path="${1%/}/"
	else
		path="$2$1/"
	fi

	if cd "$1"; then
		for file in .* *; do
			case "$file" in
			"."|"..") continue ;;
			esac
			echo $path$file
			if [ -d "$file" -a ! -h "$file" ]; then
				pecan_dirlist "$file" "$path"
			fi
		done
		cd ..
	fi
}

###
# pecan_lndir fromdir todir
#
# Link the contents of $fromdir into $todir.
#
pecan_lndir()
{
	_pb_lndir_fromdir="$1"
	_pb_lndir_todir="$2"

	( pecan_dirlist "${_pb_lndir_fromdir}" ) |
	while read _pb_lndir_src; do
		[ "${_pb_lndir_src}" != "${_pb_lndir_fromdir}" ] || continue
		_pb_lndir_file="${_pb_lndir_src#${_pb_lndir_fromdir}/}"
		_pb_lndir_dest="${_pb_lndir_todir}/${_pb_lndir_file}"
		if [ -d "${_pb_lndir_src}" -a ! -h "${_pb_lndir_src}" ]; then
			[ -d "${_pb_lndir_dest}" ] || \
				mkdir -p "${_pb_lndir_dest}"
		else
			ln -s "${_pb_lndir_src}" "${_pb_lndir_dest}"
		fi
	done
}

###
# pecan_encapinfo_lookup path_to_encapinfo field varname
#
# Look for the named field in the encapinfo file and store its value
# in the given variable.
#
pecan_encapinfo_lookup()
{
	_pb_encapinfo_path="$1"
	_pb_encapinfo_fieldname="$2"
	_pb_encapinfo_varname="$3"

	[ -f "${_pb_encapinfo_path}" ] || return 1

	while read _pb_encapinfo_field _pb_encapinfo_rest; do
		case "${_pb_encapinfo_field}" in
		"${_pb_encapinfo_fieldname}")
			[ -z "${_pb_encapinfo_varname}" ] || \
				eval "${_pb_encapinfo_varname}=\"${_pb_encapinfo_rest}\""
			return 0
			;;
		*)
			continue
			;;
		esac
	done < "${_pb_encapinfo_path}"
}
